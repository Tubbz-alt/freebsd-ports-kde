--- ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/generator.py
@@ -112,7 +112,10 @@
 
   # Dump the data to disk.
   with open(full_path, "wb") as f:
-    f.write(contents)
+    if isinstance(contents, str):
+      f.write(contents.encode('utf-8'))
+    else:
+      f.write(contents)
 
 
 def AddComputedData(module):
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/module.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/module.py
@@ -154,6 +154,8 @@
          print(b.name)  # Outputs 'test_struct_2'.
     """
     def Get(self):
+      if name not in self.shared_definition:
+        raise AttributeError(name)
       return self.shared_definition[name]
 
     def Set(self, value):
@@ -161,7 +163,20 @@
 
     setattr(cls, name, property(Get, Set))
 
+  @classmethod
+  def AddSharedListProperty(cls, name):
+    """See AddSharedProperty, except this property is always coerced to a List"""
+    def Get(self):
+      if name not in self.shared_definition:
+        raise AttributeError(name)
+      return self.shared_definition[name]
 
+    def Set(self, value):
+      self.shared_definition[name] = list(value)
+
+    setattr(cls, name, property(Get, Set))
+
+
 # Initialize the set of primitive types. These can be accessed by clients.
 BOOL                  = Kind('b')
 INT8                  = Kind('i8')
@@ -327,10 +342,10 @@
   ReferenceKind.AddSharedProperty('name')
   ReferenceKind.AddSharedProperty('native_only')
   ReferenceKind.AddSharedProperty('custom_serializer')
-  ReferenceKind.AddSharedProperty('fields')
-  ReferenceKind.AddSharedProperty('enums')
-  ReferenceKind.AddSharedProperty('constants')
   ReferenceKind.AddSharedProperty('attributes')
+  ReferenceKind.AddSharedListProperty('fields')
+  ReferenceKind.AddSharedListProperty('enums')
+  ReferenceKind.AddSharedListProperty('constants')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
     if mojom_name is not None:
@@ -384,7 +399,7 @@
   """
   ReferenceKind.AddSharedProperty('mojom_name')
   ReferenceKind.AddSharedProperty('name')
-  ReferenceKind.AddSharedProperty('fields')
+  ReferenceKind.AddSharedListProperty('fields')
   ReferenceKind.AddSharedProperty('attributes')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
@@ -600,7 +615,41 @@
         if self.attributes else None
 
 
+def listprop(name):
+  """
+  Returns a property that stores a value in __name.
+  The value is always coerced to a list.
+  """
+  xname = "__" + name
+  def get(self):
+    return getattr(self, xname)
+    
+  def set(self, v):
+    setattr(self, xname, list(v))
+        
+  return property(get, set)
+
+def listornoneprop(name):
+  """
+  Returns a property that stores a value in __name.
+  The value is always coerced to a list, unless it's None.
+  """
+  xname = "__" + name
+  def get(self):
+    return getattr(self, xname)
+    
+  def set(self, v):
+    if v is None:
+      setattr(self, xname, None)
+    else:
+      setattr(self, xname, list(v))
+        
+  return property(get, set)
+
 class Method(object):
+  parameters = listprop("parameters")
+  response_parameters = listornoneprop("response_parameters")
+
   def __init__(self, interface, mojom_name, ordinal=None, attributes=None):
     self.interface = interface
     self.mojom_name = mojom_name
@@ -659,10 +708,10 @@
 class Interface(ReferenceKind):
   ReferenceKind.AddSharedProperty('mojom_name')
   ReferenceKind.AddSharedProperty('name')
-  ReferenceKind.AddSharedProperty('methods')
-  ReferenceKind.AddSharedProperty('enums')
-  ReferenceKind.AddSharedProperty('constants')
   ReferenceKind.AddSharedProperty('attributes')
+  ReferenceKind.AddSharedListProperty('methods')
+  ReferenceKind.AddSharedListProperty('enums')
+  ReferenceKind.AddSharedListProperty('constants')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
     if mojom_name is not None:
@@ -731,6 +780,8 @@
 
 
 class Enum(Kind):
+  fields = listprop("fields")
+
   def __init__(self, mojom_name=None, module=None, attributes=None):
     self.mojom_name = mojom_name
     self.native_only = False
@@ -762,6 +813,13 @@
 
 
 class Module(object):
+  structs = listprop("structs")
+  unions = listprop("unions")
+  interfaces = listprop("interfaces")
+  enums = listprop("enums")
+  constants = listprop("constants")
+  imports = listprop("imports")
+
   def __init__(self, path=None, mojom_namespace=None,
                attributes=None):
     self.path = path
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_js_generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_js_generator.py
@@ -9,6 +9,7 @@
 import mojom.generate.pack as pack
 import os
 import urllib
+import urllib.request
 from mojom.generate.template_expander import UseJinja
 
 _kind_to_javascript_default_value = {
@@ -215,7 +216,7 @@
 
 
 def GetRelativeUrl(module, base_module):
-  return urllib.pathname2url(
+  return urllib.request.pathname2url(
       os.path.relpath(module.path, os.path.dirname(base_module.path)))
 
 
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py
@@ -873,7 +873,23 @@
       if param_counts[-1] != version.num_fields:
         param_counts.append(version.num_fields)
 
-    ordinal_fields = sorted(struct.fields, key=lambda field: field.ordinal)
+    class OrdinalSorter:
+      """
+      In Python2, None could be sorted relative to other values: 
+        None < None           -> False
+        None < something_else -> True
+        something_else < None -> False
+      """
+      def __init__(self, o):
+        self.o = o
+      def __lt__(self, other):
+        if other.o is None:
+          return False
+        if self.o is None:
+          return True  # None < anything
+        return self.o < other.o
+
+    ordinal_fields = sorted(struct.fields, key=lambda field: OrdinalSorter(field.ordinal))
     return (StructConstructor(struct.fields, ordinal_fields[:param_count])
             for param_count in param_counts)
 
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/concatenate_and_replace_closure_exports.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/concatenate_and_replace_closure_exports.py
@@ -27,20 +27,20 @@
 
 
 def FilterLine(filename, line, output):
-  if line.startswith("goog.require"):
+  if line.startswith(b"goog.require"):
     return
 
-  if line.startswith("goog.provide"):
-    match = re.match("goog.provide\('([^']+)'\);", line)
+  if line.startswith(b"goog.provide"):
+    match = re.match(b"goog.provide\('([^']+)'\);", line)
     if not match:
       print("Invalid goog.provide line in %s:\n%s" % (filename, line))
       exit(1)
 
     module_name = match.group(1)
     if module_name == _MOJO_INTERNAL_MODULE_NAME:
-      output.write("self.mojo = { internal: {} };")
+      output.write(b"self.mojo = { internal: {} };")
     else:
-      output.write("%s('%s');\n" % (_MOJO_EXPORT_MODULE_SYMBOL, module_name))
+      output.write(("%s('%s');\n" % (_MOJO_EXPORT_MODULE_SYMBOL, module_name)).encode())
     return
 
   output.write(line)
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/mojom_bindings_generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/mojom_bindings_generator.py
@@ -112,6 +112,7 @@
 
 
 def ScrambleMethodOrdinals(interfaces, salt):
+  salt_str = salt.encode()
   already_generated = set()
   for interface in interfaces:
     i = 0
@@ -126,9 +127,9 @@
         # to be very strong, cryptographically. It just needs to be non-trivial
         # to guess the results without the secret salt, in order to make it
         # harder for a compromised process to send fake Mojo messages.
-        sha256 = hashlib.sha256(salt)
-        sha256.update(interface.mojom_name)
-        sha256.update(str(i))
+        sha256 = hashlib.sha256(salt_str)
+        sha256.update(interface.mojom_name.encode())
+        sha256.update(str(i).encode())
         # Take the first 4 bytes as a little-endian uint32.
         ordinal = struct.unpack('<L', sha256.digest()[:4])[0]
         # Trim to 31 bits, so it always fits into a Java (signed) int.
@@ -145,7 +146,7 @@
 
 def ReadFileContents(filename):
   with open(filename, 'rb') as f:
-    return f.read()
+    return f.read().decode()
 
 
 class MojomProcessor(object):
--- ./src/3rdparty/chromium/services/device/public/cpp/usb/tools/usb_ids.py.orig
+++ ./src/3rdparty/chromium/services/device/public/cpp/usb/tools/usb_ids.py
@@ -16,14 +16,18 @@
   return name
 
 def ParseTable(input_path):
-  input_file = open(input_path, "r")
-  input = input_file.read().split("\n")
+  print("Reading table " + input_path)
+  input_file = open(input_path, "rb")
+  input = input_file.read().split(b"\n")
   input_file.close()
 
   table = {}
   vendor = None
 
   for line in input:
+    if b'\xb4' in line:
+      line = line.replace(b'\xb4', b"'")  # Bad encoding in table
+    line = line.decode()
     vendor_match = VENDOR_PATTERN.match(line)
     if vendor_match:
       if vendor:
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/make_event_factory.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/make_event_factory.py
@@ -118,7 +118,7 @@
         }
 
     def _fatal(self, message):
-        print 'FATAL ERROR: ' + message
+        print('FATAL ERROR: ' + message)
         exit(1)
 
     def _headers_header_include_path(self, entry):
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/hasher.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/hasher.py
@@ -20,18 +20,18 @@
 # We've modified Victor's version to output hash values that match WTFString,
 # which involves using a specific seed and some different constants.
 
-class uint32_t(long):
+class uint32_t(int):
     def __rshift__(self, other):
-        return uint32_t(long.__rshift__(self, other) & ((1L << 32) - 1))
+        return uint32_t(int.__rshift__(self, other) & ((1 << 32) - 1))
 
     def __lshift__(self, other):
-        return uint32_t(long.__lshift__(self, other) & ((1L << 32) - 1))
+        return uint32_t(int.__lshift__(self, other) & ((1 << 32) - 1))
 
     def __add__(self, other):
-        return uint32_t(long.__add__(self, other) & ((1L << 32) - 1))
+        return uint32_t(int.__add__(self, other) & ((1 << 32) - 1))
 
     def __xor__(self, other):
-        return uint32_t(long.__xor__(self, other) & ((1L << 32) - 1))
+        return uint32_t(int.__xor__(self, other) & ((1 << 32) - 1))
 
 
 def hash(string):
@@ -46,7 +46,7 @@
     if not string:
         return 0
 
-    result = uint32_t(0x9E3779B9L)
+    result = uint32_t(0x9E3779B9)
     length = len(string)
     remainder = length & 1
     length >>= 1
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/core/css/properties/make_css_property_instances.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/core/css/properties/make_css_property_instances.py
@@ -39,8 +39,8 @@
         aliases = self._css_properties.aliases
 
         # Lists of PropertyClassData.
-        self._property_classes_by_id = map(self.get_class, properties)
-        self._alias_classes_by_id = map(self.get_class, aliases)
+        self._property_classes_by_id = list(map(self.get_class, properties))
+        self._alias_classes_by_id = list(map(self.get_class, aliases))
 
         # Sort by enum value.
         self._property_classes_by_id.sort(key=lambda t: t.enum_value)
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/in_file.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/in_file.py
@@ -158,5 +158,5 @@
 
     def _fatal(self, message):
         # FIXME: This should probably raise instead of exit(1)
-        print message
+        print(message)
         exit(1)
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/gperf.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/gperf.py
@@ -61,7 +61,7 @@
             if gperf_extra_args:
                 gperf_args.extend(gperf_extra_args)
             return generate_gperf(gperf_path, gperf_input, gperf_args)
-        generator_internal.func_name = generator.func_name
+        generator_internal.func_name = generator.__name__
         return generator_internal
     return wrapper
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/macros.tmpl.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/macros.tmpl
@@ -53,6 +53,8 @@
     {% else %}
 switch (data[{{index}}]) {
     {% endif %}
+{{ trie }}
+{{ trie.items() }}
     {% for char, value in trie.items()|sort %}
 case '{{char}}':
     {{ trie_switch(value, index + 1, return_macro, lowercase_data) | indent(4) }}
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/template_expander.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/template_expander.py
@@ -55,6 +55,8 @@
             template_cache[template_path] = template
 
     params['template_file'] = template_path
+    for k, v in params.items():
+      print(k + " t=" + str(type(v)) + "  v=" + repr(v))
     return template.render(params)
 
 
@@ -64,6 +66,6 @@
             parameters = generator(*args, **kwargs)
             return apply_template(template_path, parameters, filters=filters,
                                   tests=tests, template_cache=template_cache)
-        generator_internal.func_name = generator.func_name
+        generator_internal.func_name = generator.__name__
         return generator_internal
     return real_decorator
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/rule_bison.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/rule_bison.py
@@ -75,7 +75,7 @@
 for outputHTry in outputHTries:
     try:
         os.unlink(outputHTry)
-    except OSError, e:
+    except OSError as e:
         if e.errno != errno.ENOENT:
             raise
 
@@ -91,7 +91,7 @@
         os.stat(outputHTry)
         outputHTmp = outputHTry
         break
-    except OSError, e:
+    except OSError as e:
         if e.errno != errno.ENOENT:
             raise
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/in_generator.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/in_generator.py
@@ -92,7 +92,7 @@
         script_name = os.path.basename(argv[0])
         args = argv[1:]
         if len(args) < 1:
-            print "USAGE: %s INPUT_FILES" % script_name
+            print("USAGE: %s INPUT_FILES" % script_name)
             exit(1)
 
         parser = optparse.OptionParser()
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/make_runtime_features.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/make_runtime_features.py
@@ -28,7 +28,7 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 import copy
-import cPickle as pickle
+import pickle
 import os
 import sys
 
@@ -138,7 +138,7 @@
                 except Exception:
                     # If trouble unpickling, overwrite
                     pass
-        with open(os.path.abspath(file_name), 'w') as pickle_file:
+        with open(os.path.abspath(file_name), 'wb') as pickle_file:
             pickle.dump(features_map, pickle_file)
 
     def _template_inputs(self):
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/json5_generator.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/json5_generator.py
@@ -103,7 +103,7 @@
         assert valid_keys, "'valid_keys' must be declared when using a dict value"
         return all([(key in valid_keys or key == "default")
                     and (val in valid_values or val == "")
-                    for key, val in value.iteritems()])
+                    for key, val in value.items()])
     else:
         return value in valid_values
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/compute_global_objects.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/compute_global_objects.py
@@ -46,7 +46,7 @@
 
 
 def dict_union(dicts):
-    return dict((k, v) for d in dicts for k, v in d.iteritems())
+    return dict((k, v) for d in dicts for k, v in d.items())
 
 
 def idl_file_to_global_names(idl_filename):
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/generate_global_constructors.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/generate_global_constructors.py
@@ -109,7 +109,7 @@
 def generate_global_constructors_list(interface_name, extended_attributes):
     extended_attributes_list = [
         name + (('=' + extended_attributes[name]) if extended_attributes[name] else '')
-        for name in 'RuntimeEnabled', 'ContextEnabled', 'SecureContext'
+        for name in ('RuntimeEnabled', 'ContextEnabled', 'SecureContext')
         if name in extended_attributes]
     if extended_attributes_list:
         extended_string = '[%s] ' % ', '.join(extended_attributes_list)
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/utilities.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/utilities.py
@@ -8,7 +8,7 @@
 """
 
 import os
-import cPickle as pickle
+import pickle
 import re
 import shlex
 import string
@@ -307,15 +307,16 @@
 
 def read_pickle_file(pickle_filename):
     pickle_filename = abs(pickle_filename)
-    with open(pickle_filename) as pickle_file:
+    with open(pickle_filename, "rb") as pickle_file:
         return pickle.load(pickle_file)
 
 
 def write_file(new_text, destination_filename):
+    new_text = new_text.encode()
     destination_filename = abs(destination_filename)
     # If |new_text| is same with the file content, we skip updating.
     if os.path.isfile(destination_filename):
-        with open(destination_filename) as destination_file:
+        with open(destination_filename, "rb") as destination_file:
             if destination_file.read() == new_text:
                 return
 
@@ -339,7 +340,7 @@
             except Exception:
                 # If trouble unpickling, overwrite
                 pass
-    with open(pickle_filename, 'w') as pickle_file:
+    with open(pickle_filename, 'wb') as pickle_file:
         pickle.dump(data, pickle_file)
 
 
@@ -416,7 +417,7 @@
         if parences < 0 or square_brackets < 0:
             raise ValueError('You have more close braces than open braces.')
         if parences == 0 and square_brackets == 0:
-            name, _, value = map(string.strip, concatenated.partition('='))
+            name, _, value = map(lambda s : s.strip(), concatenated.partition('='))
             extended_attributes[name] = value
             concatenated = None
     return extended_attributes
@@ -432,7 +433,7 @@
     if not match:
         return None
     arguments = []
-    for argument in map(string.strip, match.group(1).split(',')):
+    for argument in map(lambda s : s.strip(), match.group(1).split(',')):
         exposed, runtime_enabled = argument.split()
         arguments.append({'exposed': exposed, 'runtime_enabled': runtime_enabled})
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/code_generator.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/code_generator.py
@@ -194,7 +194,7 @@
         cache_dir = argv[1]
         dummy_filename = argv[2]
     except IndexError:
-        print 'Usage: %s CACHE_DIR DUMMY_FILENAME' % argv[0]
+        print('Usage: %s CACHE_DIR DUMMY_FILENAME' % argv[0])
         return 1
 
     # Cache templates
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/blink_idl_parser.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/blink_idl_parser.py
@@ -139,7 +139,7 @@
     try:
         outputdir = argv[1]
     except IndexError as err:
-        print 'Usage: %s OUTPUT_DIR' % argv[0]
+        print('Usage: %s OUTPUT_DIR' % argv[0])
         return 1
     blink_idl_lexer.main(argv)
     # Important: rewrite_tables=True causes the cache file to be deleted if it
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/modular_build.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/modular_build.py
@@ -40,7 +40,7 @@
     try:
         return json.loads(read_file(filename))
     except:
-        print 'ERROR: Failed to parse %s' % filename
+        print('ERROR: Failed to parse %s' % filename)
         raise
 
 
@@ -68,7 +68,7 @@
 
     def application_json(self):
         result = dict()
-        result['modules'] = self.application.values()
+        result['modules'] = list(self.application.values())
         result['has_html'] = self.has_html
         return json.dumps(result)
 
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/build_release_applications.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/build_release_applications.py
@@ -11,7 +11,7 @@
 - Builds app.html referencing the application script.
 """
 
-from cStringIO import StringIO
+from io import StringIO
 from os import path
 from os.path import join
 import copy
@@ -193,7 +193,7 @@
             resource_name = path.normpath(resource_name).replace('\\', '/')
             output.write('Root.Runtime.cachedResources["%s"] = "' % resource_name)
             resource_content = read_file(path.join(self.application_dir, resource_name))
-            resource_content += resource_source_url(resource_name).encode('utf-8')
+            resource_content += resource_source_url(resource_name)
             resource_content = resource_content.replace('\\', '\\\\')
             resource_content = resource_content.replace('\n', '\\n')
             resource_content = resource_content.replace('"', '\\"')
@@ -236,7 +236,7 @@
             output.write('/* Additional descriptors */\n')
             output.write('Root.allDescriptors.push(...%s);' % self._release_module_descriptors())
             output.write('/* Additional descriptors %s */\n' % self.app_file('json'))
-            output.write('Root.applicationDescriptor.modules.push(...%s);' % json.dumps(self.descriptors.application.values()))
+            output.write('Root.applicationDescriptor.modules.push(...%s);' % json.dumps(list(self.descriptors.application.values())))
 
         output.write('\n/* Autostart modules */\n')
         if (self.descriptors.worker):
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/generate_devtools_grd.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/generate_devtools_grd.py
@@ -116,7 +116,7 @@
 
     try:
         os.makedirs(path.join(output_directory, 'Images'))
-    except OSError, e:
+    except OSError as e:
         if e.errno != errno.EEXIST:
             raise e
 
@@ -140,7 +140,7 @@
             shutil.copy(path.join(dirname, filename), path.join(output_directory, 'Images'))
             add_file_to_grd(doc, path.join('Images', filename))
 
-    with open(parsed_args.output_filename, 'w') as output_file:
+    with open(parsed_args.output_filename, 'wb') as output_file:
         output_file.write(doc.toxml(encoding='UTF-8'))
 
 
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/generate_supported_css.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/generate_supported_css.py
@@ -38,9 +38,12 @@
 
 
 def _keep_only_required_keys(entry):
+    removeme = []
     for key in entry.keys():
         if key not in ("name", "longhands", "svg", "inherited"):
-            del entry[key]
+            removeme.append(key)
+    for key in removeme:
+        del entry[key]
     return entry
 
 
--- ./src/3rdparty/chromium/tools/polymer/polymer.py.orig
+++ ./src/3rdparty/chromium/tools/polymer/polymer.py
@@ -491,8 +491,6 @@
   # across platforms.
   with io.open(os.path.join(out_folder, result[1]), mode='w', encoding='utf-8', newline='\n') as f:
     for l in result[0]:
-      if (type(l) != unicode):
-        l = unicode(l, encoding='utf-8')
       f.write(l)
   return
 
--- ./src/3rdparty/chromium/tools/idl_parser/idl_parser.py.orig
+++ ./src/3rdparty/chromium/tools/idl_parser/idl_parser.py
@@ -35,9 +35,9 @@
 import sys
 import time
 
-from idl_lexer import IDLLexer
-from idl_node import IDLAttribute
-from idl_node import IDLNode
+from .idl_lexer import IDLLexer
+from .idl_node import IDLAttribute
+from .idl_node import IDLNode
 
 SRC_DIR = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir)
 sys.path.insert(0, os.path.join(SRC_DIR, 'third_party'))
--- ./src/3rdparty/chromium/tools/metrics/ukm/codegen.py.orig
+++ ./src/3rdparty/chromium/tools/metrics/ukm/codegen.py
@@ -20,7 +20,7 @@
 def HashName(name):
   # This must match the hash function in base/metrics/metric_hashes.cc
   # >Q: 8 bytes, big endian.
-  return struct.unpack('>Q', hashlib.md5(name).digest()[:8])[0]
+  return struct.unpack('>Q', hashlib.md5(name.encode()).digest()[:8])[0]
 
 
 class FileInfo(object):
--- ./src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py.orig
+++ ./src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py
@@ -28,21 +28,21 @@
 _QUANTILES_TYPE = models.ObjectNodeType(
     'quantiles',
     attributes=[
-      ('type', unicode, None),
+      ('type', str, None),
     ],
     single_line=True)
 
 _INDEX_TYPE = models.ObjectNodeType(
     'index',
     attributes=[
-      ('fields', unicode, None),
+      ('fields', str, None),
     ],
     single_line=True)
 
 _STATISTICS_TYPE =  models.ObjectNodeType(
     'statistics',
     attributes=[
-      ('export', unicode, r'^(?i)(|true|false)$'),
+      ('export', str, r'^(?i)(|true|false)$'),
     ],
     children=[
         models.ChildType(_QUANTILES_TYPE.tag, _QUANTILES_TYPE, multiple=False),
@@ -72,9 +72,9 @@
 _METRIC_TYPE =  models.ObjectNodeType(
     'metric',
     attributes=[
-      ('name', unicode, r'^[A-Za-z0-9_.]+$'),
-      ('semantic_type', unicode, None),
-      ('enum', unicode, None),
+      ('name', str, r'^[A-Za-z0-9_.]+$'),
+      ('semantic_type', str, None),
+      ('enum', str, None),
     ],
     alphabetization=[
         (_OBSOLETE_TYPE.tag, _KEEP_ORDER),
@@ -93,8 +93,8 @@
 _EVENT_TYPE =  models.ObjectNodeType(
     'event',
     attributes=[
-      ('name', unicode, r'^[A-Za-z0-9.]+$'),
-      ('singular', unicode, r'^(?i)(|true|false)$'),
+      ('name', str, r'^[A-Za-z0-9.]+$'),
+      ('singular', str, r'^(?i)(|true|false)$'),
     ],
     alphabetization=[
         (_OBSOLETE_TYPE.tag, _KEEP_ORDER),
--- ./src/3rdparty/chromium/tools/grit/grit/gather/chrome_scaled_image.py.orig
+++ ./src/3rdparty/chromium/tools/grit/grit/gather/chrome_scaled_image.py
@@ -16,7 +16,7 @@
 from grit.gather import interface
 
 
-_PNG_SCALE_CHUNK = '\0\0\0\0csCl\xc1\x30\x60\x4d'
+_PNG_SCALE_CHUNK = b'\0\0\0\0csCl\xc1\x30\x60\x4d'
 
 
 def _RescaleImage(data, from_scale, to_scale):
@@ -29,19 +29,19 @@
   return data
 
 
-_PNG_MAGIC = '\x89PNG\r\n\x1a\n'
+_PNG_MAGIC = b'\x89PNG\r\n\x1a\n'
 
 '''Mandatory first chunk in order for the png to be valid.'''
-_FIRST_CHUNK = 'IHDR'
+_FIRST_CHUNK = b'IHDR'
 
 '''Special chunks to move immediately after the IHDR chunk. (so that the PNG
 remains valid.)
 '''
-_SPECIAL_CHUNKS = frozenset('csCl npTc'.split())
+_SPECIAL_CHUNKS = frozenset(b'csCl npTc'.split())
 
 '''Any ancillary chunk not in this list is deleted from the PNG.'''
 _ANCILLARY_CHUNKS_TO_LEAVE = frozenset(
-    'bKGD cHRM gAMA iCCP pHYs sBIT sRGB tRNS acTL fcTL fdAT'.split())
+    b'bKGD cHRM gAMA iCCP pHYs sBIT sRGB tRNS acTL fcTL fdAT'.split())
 
 
 def _MoveSpecialChunksToFront(data):
@@ -53,14 +53,14 @@
   rest = []
   for chunk in _ChunkifyPNG(data):
     type = chunk[4:8]
-    critical = type < 'a'
+    critical = type < b'a'
     if type == _FIRST_CHUNK:
       first.append(chunk)
     elif type in _SPECIAL_CHUNKS:
       special_chunks.append(chunk)
     elif critical or type in _ANCILLARY_CHUNKS_TO_LEAVE:
       rest.append(chunk)
-  return ''.join(first + special_chunks + rest)
+  return b''.join(first + special_chunks + rest)
 
 
 def _ChunkifyPNG(data):
--- ./src/3rdparty/chromium/tools/grit/grit/gather/chrome_html.py.orig
+++ ./src/3rdparty/chromium/tools/grit/grit/gather/chrome_html.py
@@ -31,27 +31,27 @@
 
 # Matches a chrome theme source URL.
 _THEME_SOURCE = lazy_re.compile(
-    r'(?P<baseurl>chrome://theme/IDR_[A-Z0-9_]*)(?P<query>\?.*)?')
+    rb'(?P<baseurl>chrome://theme/IDR_[A-Z0-9_]*)(?P<query>\?.*)?')
 # Pattern for matching CSS url() function.
-_CSS_URL_PATTERN = r'url\((?P<quote>"|\'|)(?P<filename>[^"\'()]*)(?P=quote)\)'
+_CSS_URL_PATTERN = rb'url\((?P<quote>"|\'|)(?P<filename>[^"\'()]*)(?P=quote)\)'
 # Matches CSS url() functions with the capture group 'filename'.
 _CSS_URL = lazy_re.compile(_CSS_URL_PATTERN)
 # Matches one or more CSS image urls used in given properties.
 _CSS_IMAGE_URLS = lazy_re.compile(
-    r'(?P<attribute>content|background|[\w-]*-image):\s*'
-        r'(?P<urls>(' + _CSS_URL_PATTERN + r'\s*,?\s*)+)')
+    rb'(?P<attribute>content|background|[\w-]*-image):\s*'
+        rb'(?P<urls>(' + _CSS_URL_PATTERN + rb'\s*,?\s*)+)')
 # Matches CSS image sets.
 _CSS_IMAGE_SETS = lazy_re.compile(
-    r'(?P<attribute>content|background|[\w-]*-image):[ ]*'
-        r'-webkit-image-set\((?P<images>'
-        r'(\s*,?\s*url\((?P<quote>"|\'|)[^"\'()]*(?P=quote)\)[ ]*[0-9.]*x)*)\)',
+    rb'(?P<attribute>content|background|[\w-]*-image):[ ]*'
+        rb'-webkit-image-set\((?P<images>'
+        rb'(\s*,?\s*url\((?P<quote>"|\'|)[^"\'()]*(?P=quote)\)[ ]*[0-9.]*x)*)\)',
     re.MULTILINE)
 # Matches a single image in a CSS image set with the capture group scale.
-_CSS_IMAGE_SET_IMAGE = lazy_re.compile(r'\s*,?\s*'
-    r'url\((?P<quote>"|\'|)[^"\'()]*(?P=quote)\)[ ]*(?P<scale>[0-9.]*x)',
+_CSS_IMAGE_SET_IMAGE = lazy_re.compile(rb'\s*,?\s*'
+    rb'url\((?P<quote>"|\'|)[^"\'()]*(?P=quote)\)[ ]*(?P<scale>[0-9.]*x)',
     re.MULTILINE)
 _HTML_IMAGE_SRC = lazy_re.compile(
-    r'<img[^>]+src=\"(?P<filename>[^">]*)\"[^>]*>')
+    rb'<img[^>]+src=\"(?P<filename>[^">]*)\"[^>]*>')
 
 def GetImageList(
     base_path, filename, scale_factors, distribution,
@@ -85,7 +85,7 @@
       images.append((scale_factor, scale_filename))
     return images
 
-  if filename.find(':') != -1:
+  if filename.find(b':') != -1:
     # filename is probably a URL, only return filename itself.
     return [('1x', filename)]
 
--- ./src/3rdparty/chromium/tools/grit/grit/format/html_inline.py.orig
+++ ./src/3rdparty/chromium/tools/grit/grit/format/html_inline.py
@@ -39,26 +39,26 @@
 
 # Matches beginning of an "if" block.
 _BEGIN_IF_BLOCK = lazy_re.compile(
-    r'<if [^>]*?expr=("(?P<expr1>[^">]*)"|\'(?P<expr2>[^\'>]*)\')[^>]*?>')
+    rb'<if [^>]*?expr=("(?P<expr1>[^">]*)"|\'(?P<expr2>[^\'>]*)\')[^>]*?>')
 
 # Matches ending of an "if" block.
-_END_IF_BLOCK = lazy_re.compile(r'</if>')
+_END_IF_BLOCK = lazy_re.compile(rb'</if>')
 
 # Used by DoInline to replace various links with inline content.
 _STYLESHEET_RE = lazy_re.compile(
-    r'<link rel="stylesheet"[^>]+?href="(?P<filename>[^"]*)".*?>(\s*</link>)?',
+    rb'<link rel="stylesheet"[^>]+?href="(?P<filename>[^"]*)".*?>(\s*</link>)?',
     re.DOTALL)
 _INCLUDE_RE = lazy_re.compile(
-    r'(?P<comment>\/\/ )?<include[^>]+?'
-    r'src=("(?P<file1>[^">]*)"|\'(?P<file2>[^\'>]*)\').*?>(\s*</include>)?',
+    rb'(?P<comment>\/\/ )?<include[^>]+?'
+    rb'src=("(?P<file1>[^">]*)"|\'(?P<file2>[^\'>]*)\').*?>(\s*</include>)?',
     re.DOTALL)
 _SRC_RE = lazy_re.compile(
-    r'<(?!script)(?:[^>]+?\s)src="(?!\[\[|{{)(?P<filename>[^"\']*)"',
+    rb'<(?!script)(?:[^>]+?\s)src="(?!\[\[|{{)(?P<filename>[^"\']*)"',
     re.MULTILINE)
 # This re matches '<img srcset="..."' or '<source srcset="..."'
 _SRCSET_RE = lazy_re.compile(
-    r'<(img|source)\b(?:[^>]*?\s)srcset="(?!\[\[|{{|\$i18n{)'
-    r'(?P<srcset>[^"\']*)"',
+    rb'<(img|source)\b(?:[^>]*?\s)srcset="(?!\[\[|{{|\$i18n{)'
+    rb'(?P<srcset>[^"\']*)"',
     re.MULTILINE)
 # This re is for splitting srcset value string into "image candidate strings".
 # Notes:
@@ -70,13 +70,13 @@
 #   that form both of them.
 # Matches for example "img2.png 2x" or "img9.png 11E-2w".
 _SRCSET_ENTRY_RE = lazy_re.compile(
-    r'\s*(?P<url>[^,\s]\S+[^,\s])'
-    r'(?:\s+(?P<descriptor>[\deE.-]+[wx]))?\s*'
-    r'(?P<separator>,|$)',
+    rb'\s*(?P<url>[^,\s]\S+[^,\s])'
+    rb'(?:\s+(?P<descriptor>[\deE.-]+[wx]))?\s*'
+    rb'(?P<separator>,|$)',
     re.MULTILINE)
 _ICON_RE = lazy_re.compile(
-    r'<link rel="icon"\s(?:[^>]+?\s)?'
-    r'href=(?P<quote>")(?P<filename>[^"\']*)\1',
+    rb'<link rel="icon"\s(?:[^>]+?\s)?'
+    rb'href=(?P<quote>")(?P<filename>[^"\']*)\1',
     re.MULTILINE)
 
 
@@ -308,42 +308,42 @@
     filename = [v for k, v in src_match.groupdict().items()
                 if k.startswith('file') and v][0]
 
-    if filename.find(':') != -1:
+    if filename.find(b':') != -1:
       # filename is probably a URL, which we don't want to bother inlining
       return None
 
-    filename = filename.replace('%DISTRIBUTION%', distribution)
+    filename = filename.replace(b'%DISTRIBUTION%', distribution.encode())
     if filename_expansion_function:
       filename = filename_expansion_function(filename)
-    return os.path.normpath(os.path.join(base_path, filename))
+    return os.path.normpath(os.path.join(base_path, filename.decode()))
 
   def IsConditionSatisfied(src_match):
-    expr1 = src_match.group('expr1') or ''
-    expr2 = src_match.group('expr2') or ''
+    expr1 = src_match.group('expr1') or b''
+    expr2 = src_match.group('expr2') or b''
     return grd_node is None or grd_node.EvaluateCondition(expr1 + expr2)
 
-  def CheckConditionalElements(str):
+  def CheckConditionalElements(text):
     """Helper function to conditionally inline inner elements"""
     while True:
-      begin_if = _BEGIN_IF_BLOCK.search(str)
+      begin_if = _BEGIN_IF_BLOCK.search(text)
       if begin_if is None:
-        if _END_IF_BLOCK.search(str) is not None:
+        if _END_IF_BLOCK.search(text) is not None:
           raise Exception('Unmatched </if>')
-        return str
+        return text
 
       condition_satisfied = IsConditionSatisfied(begin_if)
-      leading = str[0:begin_if.start()]
+      leading = text[0:begin_if.start()]
       content_start = begin_if.end()
 
       # Find matching "if" block end.
       count = 1
       pos = begin_if.end()
       while True:
-        end_if = _END_IF_BLOCK.search(str, pos)
+        end_if = _END_IF_BLOCK.search(text, pos)
         if end_if is None:
           raise Exception('Unmatched <if>')
 
-        next_if = _BEGIN_IF_BLOCK.search(str, pos)
+        next_if = _BEGIN_IF_BLOCK.search(text, pos)
         if next_if is None or next_if.start() >= end_if.end():
           count = count - 1
           if count == 0:
@@ -353,13 +353,13 @@
           count = count + 1
           pos = next_if.end()
 
-      content = str[content_start:end_if.start()]
-      trailing = str[end_if.end():]
+      content = text[content_start:end_if.start()]
+      trailing = text[end_if.end():]
 
       if condition_satisfied:
-        str = leading + CheckConditionalElements(content) + trailing
+        text = leading + CheckConditionalElements(content) + trailing
       else:
-        str = leading + trailing
+        text = leading + trailing
 
   def InlineFileContents(src_match,
                          pattern,
@@ -459,12 +459,12 @@
         r'[ ]*[0-9.]*x[ ]*(,[ ]*)?)+\)')
     value_re = '(%s|%s)' % (GetUrlRegexString(), image_set_value_re)
     css_re = property_re + value_re
-    return re.sub(css_re, lambda m: InlineCSSUrls(m, filepath), text)
+    return re.sub(css_re.encode(), lambda m: InlineCSSUrls(m, filepath), text)
 
   def InlineCSSUrls(src_match, filepath=input_filepath):
     """Helper function that inlines each url on a CSS image rule match."""
     # Replace contents of url() references in matches.
-    return re.sub(GetUrlRegexString(),
+    return re.sub(GetUrlRegexString().encode(),
                   lambda m: SrcReplace(m, filepath),
                   src_match.group(0))
 
@@ -472,7 +472,7 @@
     """Helper function that inlines CSS files included via the @import
        directive.
     """
-    return re.sub(r'@import\s+' + GetUrlRegexString() + r';',
+    return re.sub(rb'@import\s+' + GetUrlRegexString().encode() + rb';',
                   lambda m: InlineCSSFile(m, '%s', filepath),
                   text)
 
@@ -484,9 +484,25 @@
   # InlineScript, InlineCSSFile and InlineIncludeFiles on text we're eventually
   # going to throw out anyway.
   flat_text = CheckConditionalElements(flat_text)
+  if isinstance(flat_text, bytes):
+    pass
+  else:
+    flat_text = flat_text.encode()
 
-  flat_text = _INCLUDE_RE.sub(InlineIncludeFiles, flat_text)
+  def inliner(m):
+    r = InlineIncludeFiles(m)
+    if isinstance(r, bytes):
+      return r
+    return r.encode()
 
+  flat_text = _INCLUDE_RE.sub(inliner, flat_text)
+
+  def replacor(m):
+    r = InlineCSSFile(m, '<style>%s</style>')
+    if isinstance(r, bytes):
+      return r
+    return r.encode()
+
   if not preprocess_only:
     if strip_whitespace:
       flat_text = minifier.Minify(flat_text, input_filename)
@@ -494,13 +510,17 @@
     if not allow_external_script:
       # We need to inline css and js before we inline images so that image
       # references gets inlined in the css and js
-      flat_text = re.sub(r'<script (?P<attrs1>.*?)src="(?P<filename>[^"\']*)"'
-                         r'(?P<attrs2>.*?)></script>',
+      flat_text = re.sub(rb'<script (?P<attrs1>.*?)src="(?P<filename>[^"\']*)"'
+                         rb'(?P<attrs2>.*?)></script>',
                          InlineScript,
                          flat_text)
 
+    if isinstance(flat_text, bytes):
+      pass
+    else:
+      flat_text = flat_text.encode()
     flat_text = _STYLESHEET_RE.sub(
-        lambda m: InlineCSSFile(m, '<style>%s</style>'),
+        replacor,
         flat_text)
 
   # Check conditional elements, second pass. This catches conditionals in any
--- ./src/3rdparty/chromium/tools/grit/grit/format/data_pack.py.orig
+++ ./src/3rdparty/chromium/tools/grit/grit/format/data_pack.py
@@ -195,7 +195,7 @@
 
   # Write data.
   ret.extend(deduped_data)
-  return ''.join(ret)
+  return b''.join(ret)
 
 
 def WriteDataPack(resources, output_file, encoding):
