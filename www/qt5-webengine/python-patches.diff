--- ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/generator.py
@@ -112,7 +112,10 @@
 
   # Dump the data to disk.
   with open(full_path, "wb") as f:
-    f.write(contents)
+    if isinstance(contents, str):
+      f.write(contents.encode('utf-8'))
+    else:
+      f.write(contents)
 
 
 def AddComputedData(module):
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/module.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/module.py
@@ -154,6 +154,8 @@
          print(b.name)  # Outputs 'test_struct_2'.
     """
     def Get(self):
+      if name not in self.shared_definition:
+        raise AttributeError(name)
       return self.shared_definition[name]
 
     def Set(self, value):
@@ -161,7 +163,20 @@
 
     setattr(cls, name, property(Get, Set))
 
+  @classmethod
+  def AddSharedListProperty(cls, name):
+    """See AddSharedProperty, except this property is always coerced to a List"""
+    def Get(self):
+      if name not in self.shared_definition:
+        raise AttributeError(name)
+      return self.shared_definition[name]
 
+    def Set(self, value):
+      self.shared_definition[name] = list(value)
+
+    setattr(cls, name, property(Get, Set))
+
+
 # Initialize the set of primitive types. These can be accessed by clients.
 BOOL                  = Kind('b')
 INT8                  = Kind('i8')
@@ -327,10 +342,10 @@
   ReferenceKind.AddSharedProperty('name')
   ReferenceKind.AddSharedProperty('native_only')
   ReferenceKind.AddSharedProperty('custom_serializer')
-  ReferenceKind.AddSharedProperty('fields')
-  ReferenceKind.AddSharedProperty('enums')
-  ReferenceKind.AddSharedProperty('constants')
   ReferenceKind.AddSharedProperty('attributes')
+  ReferenceKind.AddSharedListProperty('fields')
+  ReferenceKind.AddSharedListProperty('enums')
+  ReferenceKind.AddSharedListProperty('constants')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
     if mojom_name is not None:
@@ -384,7 +399,7 @@
   """
   ReferenceKind.AddSharedProperty('mojom_name')
   ReferenceKind.AddSharedProperty('name')
-  ReferenceKind.AddSharedProperty('fields')
+  ReferenceKind.AddSharedListProperty('fields')
   ReferenceKind.AddSharedProperty('attributes')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
@@ -600,7 +615,41 @@
         if self.attributes else None
 
 
+def listprop(name):
+  """
+  Returns a property that stores a value in __name.
+  The value is always coerced to a list.
+  """
+  xname = "__" + name
+  def get(self):
+    return getattr(self, xname)
+    
+  def set(self, v):
+    setattr(self, xname, list(v))
+        
+  return property(get, set)
+
+def listornoneprop(name):
+  """
+  Returns a property that stores a value in __name.
+  The value is always coerced to a list, unless it's None.
+  """
+  xname = "__" + name
+  def get(self):
+    return getattr(self, xname)
+    
+  def set(self, v):
+    if v is None:
+      setattr(self, xname, None)
+    else:
+      setattr(self, xname, list(v))
+        
+  return property(get, set)
+
 class Method(object):
+  parameters = listprop("parameters")
+  response_parameters = listornoneprop("response_parameters")
+
   def __init__(self, interface, mojom_name, ordinal=None, attributes=None):
     self.interface = interface
     self.mojom_name = mojom_name
@@ -659,10 +708,10 @@
 class Interface(ReferenceKind):
   ReferenceKind.AddSharedProperty('mojom_name')
   ReferenceKind.AddSharedProperty('name')
-  ReferenceKind.AddSharedProperty('methods')
-  ReferenceKind.AddSharedProperty('enums')
-  ReferenceKind.AddSharedProperty('constants')
   ReferenceKind.AddSharedProperty('attributes')
+  ReferenceKind.AddSharedListProperty('methods')
+  ReferenceKind.AddSharedListProperty('enums')
+  ReferenceKind.AddSharedListProperty('constants')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
     if mojom_name is not None:
@@ -731,6 +780,8 @@
 
 
 class Enum(Kind):
+  fields = listprop("fields")
+
   def __init__(self, mojom_name=None, module=None, attributes=None):
     self.mojom_name = mojom_name
     self.native_only = False
@@ -762,6 +813,13 @@
 
 
 class Module(object):
+  structs = listprop("structs")
+  unions = listprop("unions")
+  interfaces = listprop("interfaces")
+  enums = listprop("enums")
+  constants = listprop("constants")
+  imports = listprop("imports")
+
   def __init__(self, path=None, mojom_namespace=None,
                attributes=None):
     self.path = path
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_js_generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_js_generator.py
@@ -9,6 +9,7 @@
 import mojom.generate.pack as pack
 import os
 import urllib
+import urllib.request
 from mojom.generate.template_expander import UseJinja
 
 _kind_to_javascript_default_value = {
@@ -215,7 +216,7 @@
 
 
 def GetRelativeUrl(module, base_module):
-  return urllib.pathname2url(
+  return urllib.request.pathname2url(
       os.path.relpath(module.path, os.path.dirname(base_module.path)))
 
 
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py
@@ -873,7 +873,23 @@
       if param_counts[-1] != version.num_fields:
         param_counts.append(version.num_fields)
 
-    ordinal_fields = sorted(struct.fields, key=lambda field: field.ordinal)
+    class OrdinalSorter:
+      """
+      In Python2, None could be sorted relative to other values: 
+        None < None           -> False
+        None < something_else -> True
+        something_else < None -> False
+      """
+      def __init__(self, o):
+        self.o = o
+      def __lt__(self, other):
+        if other.o is None:
+          return False
+        if self.o is None:
+          return True  # None < anything
+        return self.o < other.o
+
+    ordinal_fields = sorted(struct.fields, key=lambda field: OrdinalSorter(field.ordinal))
     return (StructConstructor(struct.fields, ordinal_fields[:param_count])
             for param_count in param_counts)
 
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/concatenate_and_replace_closure_exports.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/concatenate_and_replace_closure_exports.py
@@ -27,20 +27,20 @@
 
 
 def FilterLine(filename, line, output):
-  if line.startswith("goog.require"):
+  if line.startswith(b"goog.require"):
     return
 
-  if line.startswith("goog.provide"):
-    match = re.match("goog.provide\('([^']+)'\);", line)
+  if line.startswith(b"goog.provide"):
+    match = re.match(b"goog.provide\('([^']+)'\);", line)
     if not match:
       print("Invalid goog.provide line in %s:\n%s" % (filename, line))
       exit(1)
 
     module_name = match.group(1)
     if module_name == _MOJO_INTERNAL_MODULE_NAME:
-      output.write("self.mojo = { internal: {} };")
+      output.write(b"self.mojo = { internal: {} };")
     else:
-      output.write("%s('%s');\n" % (_MOJO_EXPORT_MODULE_SYMBOL, module_name))
+      output.write(("%s('%s');\n" % (_MOJO_EXPORT_MODULE_SYMBOL, module_name)).encode())
     return
 
   output.write(line)
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/mojom_bindings_generator.py.orig
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/mojom_bindings_generator.py
@@ -112,6 +112,7 @@
 
 
 def ScrambleMethodOrdinals(interfaces, salt):
+  salt_str = salt.encode()
   already_generated = set()
   for interface in interfaces:
     i = 0
@@ -126,9 +127,9 @@
         # to be very strong, cryptographically. It just needs to be non-trivial
         # to guess the results without the secret salt, in order to make it
         # harder for a compromised process to send fake Mojo messages.
-        sha256 = hashlib.sha256(salt)
-        sha256.update(interface.mojom_name)
-        sha256.update(str(i))
+        sha256 = hashlib.sha256(salt_str)
+        sha256.update(interface.mojom_name.encode())
+        sha256.update(str(i).encode())
         # Take the first 4 bytes as a little-endian uint32.
         ordinal = struct.unpack('<L', sha256.digest()[:4])[0]
         # Trim to 31 bits, so it always fits into a Java (signed) int.
@@ -145,7 +146,7 @@
 
 def ReadFileContents(filename):
   with open(filename, 'rb') as f:
-    return f.read()
+    return f.read().decode()
 
 
 class MojomProcessor(object):
--- ./src/3rdparty/chromium/services/device/public/cpp/usb/tools/usb_ids.py.orig
+++ ./src/3rdparty/chromium/services/device/public/cpp/usb/tools/usb_ids.py
@@ -16,14 +16,18 @@
   return name
 
 def ParseTable(input_path):
-  input_file = open(input_path, "r")
-  input = input_file.read().split("\n")
+  print("Reading table " + input_path)
+  input_file = open(input_path, "rb")
+  input = input_file.read().split(b"\n")
   input_file.close()
 
   table = {}
   vendor = None
 
   for line in input:
+    if b'\xb4' in line:
+      line = line.replace(b'\xb4', b"'")  # Bad encoding in table
+    line = line.decode()
     vendor_match = VENDOR_PATTERN.match(line)
     if vendor_match:
       if vendor:
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/generate_global_constructors.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/generate_global_constructors.py
@@ -109,7 +109,7 @@
 def generate_global_constructors_list(interface_name, extended_attributes):
     extended_attributes_list = [
         name + (('=' + extended_attributes[name]) if extended_attributes[name] else '')
-        for name in 'RuntimeEnabled', 'ContextEnabled', 'SecureContext'
+        for name in ('RuntimeEnabled', 'ContextEnabled', 'SecureContext')
         if name in extended_attributes]
     if extended_attributes_list:
         extended_string = '[%s] ' % ', '.join(extended_attributes_list)
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/utilities.py.orig
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/utilities.py
@@ -8,7 +8,7 @@
 """
 
 import os
-import cPickle as pickle
+import pickle
 import re
 import shlex
 import string
@@ -339,7 +339,7 @@
             except Exception:
                 # If trouble unpickling, overwrite
                 pass
-    with open(pickle_filename, 'w') as pickle_file:
+    with open(pickle_filename, 'wb') as pickle_file:
         pickle.dump(data, pickle_file)
 
 
@@ -416,7 +416,7 @@
         if parences < 0 or square_brackets < 0:
             raise ValueError('You have more close braces than open braces.')
         if parences == 0 and square_brackets == 0:
-            name, _, value = map(string.strip, concatenated.partition('='))
+            name, _, value = map(lambda s : s.strip(), concatenated.partition('='))
             extended_attributes[name] = value
             concatenated = None
     return extended_attributes
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/modular_build.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/modular_build.py
@@ -40,7 +40,7 @@
     try:
         return json.loads(read_file(filename))
     except:
-        print 'ERROR: Failed to parse %s' % filename
+        print('ERROR: Failed to parse %s' % filename)
         raise
 
 
@@ -68,7 +68,7 @@
 
     def application_json(self):
         result = dict()
-        result['modules'] = self.application.values()
+        result['modules'] = list(self.application.values())
         result['has_html'] = self.has_html
         return json.dumps(result)
 
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/build_release_applications.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/build_release_applications.py
@@ -11,7 +11,7 @@
 - Builds app.html referencing the application script.
 """
 
-from cStringIO import StringIO
+from io import StringIO
 from os import path
 from os.path import join
 import copy
@@ -193,7 +193,7 @@
             resource_name = path.normpath(resource_name).replace('\\', '/')
             output.write('Root.Runtime.cachedResources["%s"] = "' % resource_name)
             resource_content = read_file(path.join(self.application_dir, resource_name))
-            resource_content += resource_source_url(resource_name).encode('utf-8')
+            resource_content += resource_source_url(resource_name)
             resource_content = resource_content.replace('\\', '\\\\')
             resource_content = resource_content.replace('\n', '\\n')
             resource_content = resource_content.replace('"', '\\"')
@@ -236,7 +236,7 @@
             output.write('/* Additional descriptors */\n')
             output.write('Root.allDescriptors.push(...%s);' % self._release_module_descriptors())
             output.write('/* Additional descriptors %s */\n' % self.app_file('json'))
-            output.write('Root.applicationDescriptor.modules.push(...%s);' % json.dumps(self.descriptors.application.values()))
+            output.write('Root.applicationDescriptor.modules.push(...%s);' % json.dumps(list(self.descriptors.application.values())))
 
         output.write('\n/* Autostart modules */\n')
         if (self.descriptors.worker):
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/generate_supported_css.py.orig
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/generate_supported_css.py
@@ -38,9 +38,12 @@
 
 
 def _keep_only_required_keys(entry):
+    removeme = []
     for key in entry.keys():
         if key not in ("name", "longhands", "svg", "inherited"):
-            del entry[key]
+            removeme.append(key)
+    for key in removeme:
+        del entry[key]
     return entry
 
 
--- ./src/3rdparty/chromium/tools/polymer/polymer.py.orig
+++ ./src/3rdparty/chromium/tools/polymer/polymer.py
@@ -491,8 +491,6 @@
   # across platforms.
   with io.open(os.path.join(out_folder, result[1]), mode='w', encoding='utf-8', newline='\n') as f:
     for l in result[0]:
-      if (type(l) != unicode):
-        l = unicode(l, encoding='utf-8')
       f.write(l)
   return
 
--- ./src/3rdparty/chromium/tools/metrics/ukm/codegen.py.orig
+++ ./src/3rdparty/chromium/tools/metrics/ukm/codegen.py
@@ -20,7 +20,7 @@
 def HashName(name):
   # This must match the hash function in base/metrics/metric_hashes.cc
   # >Q: 8 bytes, big endian.
-  return struct.unpack('>Q', hashlib.md5(name).digest()[:8])[0]
+  return struct.unpack('>Q', hashlib.md5(name.encode()).digest()[:8])[0]
 
 
 class FileInfo(object):
--- ./src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py.orig
+++ ./src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py
@@ -28,21 +28,21 @@
 _QUANTILES_TYPE = models.ObjectNodeType(
     'quantiles',
     attributes=[
-      ('type', unicode, None),
+      ('type', str, None),
     ],
     single_line=True)
 
 _INDEX_TYPE = models.ObjectNodeType(
     'index',
     attributes=[
-      ('fields', unicode, None),
+      ('fields', str, None),
     ],
     single_line=True)
 
 _STATISTICS_TYPE =  models.ObjectNodeType(
     'statistics',
     attributes=[
-      ('export', unicode, r'^(?i)(|true|false)$'),
+      ('export', str, r'^(?i)(|true|false)$'),
     ],
     children=[
         models.ChildType(_QUANTILES_TYPE.tag, _QUANTILES_TYPE, multiple=False),
@@ -72,9 +72,9 @@
 _METRIC_TYPE =  models.ObjectNodeType(
     'metric',
     attributes=[
-      ('name', unicode, r'^[A-Za-z0-9_.]+$'),
-      ('semantic_type', unicode, None),
-      ('enum', unicode, None),
+      ('name', str, r'^[A-Za-z0-9_.]+$'),
+      ('semantic_type', str, None),
+      ('enum', str, None),
     ],
     alphabetization=[
         (_OBSOLETE_TYPE.tag, _KEEP_ORDER),
@@ -93,8 +93,8 @@
 _EVENT_TYPE =  models.ObjectNodeType(
     'event',
     attributes=[
-      ('name', unicode, r'^[A-Za-z0-9.]+$'),
-      ('singular', unicode, r'^(?i)(|true|false)$'),
+      ('name', str, r'^[A-Za-z0-9.]+$'),
+      ('singular', str, r'^(?i)(|true|false)$'),
     ],
     alphabetization=[
         (_OBSOLETE_TYPE.tag, _KEEP_ORDER),
