--- ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/generator.py.orig	2020-05-06 14:21:29.000000000 +0000
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/generator.py	2020-09-18 22:41:34.852786000 +0000
@@ -112,7 +112,10 @@
 
   # Dump the data to disk.
   with open(full_path, "wb") as f:
-    f.write(contents)
+    if isinstance(contents, str):
+      f.write(contents.encode('utf-8'))
+    else:
+      f.write(contents)
 
 
 def AddComputedData(module):
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/module.py.orig	2020-05-06 14:21:29.000000000 +0000
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/pylib/mojom/generate/module.py	2020-09-19 08:30:54.226383000 +0000
@@ -154,6 +154,8 @@
          print(b.name)  # Outputs 'test_struct_2'.
     """
     def Get(self):
+      if name not in self.shared_definition:
+        raise AttributeError(name)
       return self.shared_definition[name]
 
     def Set(self, value):
@@ -327,9 +329,6 @@
   ReferenceKind.AddSharedProperty('name')
   ReferenceKind.AddSharedProperty('native_only')
   ReferenceKind.AddSharedProperty('custom_serializer')
-  ReferenceKind.AddSharedProperty('fields')
-  ReferenceKind.AddSharedProperty('enums')
-  ReferenceKind.AddSharedProperty('constants')
   ReferenceKind.AddSharedProperty('attributes')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
@@ -346,6 +345,31 @@
     self.constants = []
     self.attributes = attributes
 
+  @property
+  def fields(self):
+    return self.shared_definition["fields"]
+
+  @fields.setter
+  def fields(self, s):
+    self.shared_definition["fields"] = list(s)
+
+  @property
+  def enums(self):
+    return self.shared_definition["enums"]
+
+  @enums.setter
+  def enums(self, s):
+    self.shared_definition["enums"] = list(s)
+
+  @property
+  def constants(self):
+    return self.shared_definition["constants"]
+
+  @constants.setter
+  def constants(self, s):
+    self.shared_definition["constants"] = list(s)
+
+
   def Repr(self, as_ref=True):
     if as_ref:
       return '<%s mojom_name=%r module=%s>' % (
@@ -766,15 +790,55 @@
                attributes=None):
     self.path = path
     self.mojom_namespace = mojom_namespace
-    self.structs = []
-    self.unions = []
-    self.interfaces = []
-    self.enums = []
-    self.constants = []
+    self.__structs = []
+    self.__unions = []
+    self.__interfaces = []
+    self.__enums = []
+    self.__constants = []
     self.kinds = {}
     self.attributes = attributes
     self.imports = []
     self.imported_kinds = {}
+
+  @property
+  def structs(self):
+    return self.__structs
+
+  @structs.setter
+  def structs(self, s):
+    self.__structs = list(s)
+
+  @property
+  def unions(self):
+    return self.__unions
+
+  @unions.setter
+  def unions(self, s):
+    self.__unions = list(s)
+
+  @property
+  def interfaces(self):
+    return self.__interfaces
+
+  @interfaces.setter
+  def interfaces(self, s):
+    self.__interfaces = list(s)
+
+  @property
+  def enums(self):
+    return self.__enums
+
+  @enums.setter
+  def enums(self, s):
+    self.__enums = list(s)
+
+  @property
+  def constants(self):
+    return self.__constants
+
+  @constants.setter
+  def constants(self, s):
+    self.__constants = list(s)
 
   def __repr__(self):
     # Gives us a decent __repr__ for modules.
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_js_generator.py.orig	2020-05-06 14:21:29.000000000 +0000
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_js_generator.py	2020-09-18 22:41:34.853401000 +0000
@@ -9,6 +9,7 @@
 import mojom.generate.pack as pack
 import os
 import urllib
+import urllib.request
 from mojom.generate.template_expander import UseJinja
 
 _kind_to_javascript_default_value = {
@@ -215,7 +216,7 @@
 
 
 def GetRelativeUrl(module, base_module):
-  return urllib.pathname2url(
+  return urllib.request.pathname2url(
       os.path.relpath(module.path, os.path.dirname(base_module.path)))
 
 
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig	2020-09-18 23:14:00.769714000 +0000
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py	2020-09-19 08:59:22.897140000 +0000
@@ -522,6 +522,8 @@
     return _NameFormatter(kind, self.variant).FormatForMojom()
 
   def _IsTypemappedKind(self, kind):
+    print("IsTypemappedKind? t=" + str(type(kind)) + "  v=" + str(kind))
+    print(hasattr(kind, "name"))
     return hasattr(kind, "name") and \
         self._GetFullMojomNameForKind(kind) in self.typemap
 
@@ -873,7 +875,24 @@
       if param_counts[-1] != version.num_fields:
         param_counts.append(version.num_fields)
 
-    ordinal_fields = sorted(struct.fields, key=lambda field: field.ordinal)
+    class OrdinalSorter:
+      def __init__(self, o):
+        self.o = o
+      def __lt__(self, other):
+        if self.o is None:
+          if other.o is None:
+            return False
+          return True  # None < anything
+        if other.o is None:
+          return False # anything > None
+        return self.o < other.o
+
+    print("GetStructConstructor:")
+    print("fields t=" + str(type(struct.fields)))
+    for f in struct.fields:
+      print(".. f t=" + str(type(f)) + "  v=" + str(f))
+      print("   f ordinal=" + repr(f.ordinal))
+    ordinal_fields = sorted(struct.fields, key=lambda field: OrdinalSorter(field.ordinal))
     return (StructConstructor(struct.fields, ordinal_fields[:param_count])
             for param_count in param_counts)
 
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/mojom_bindings_generator.py.orig	2020-05-06 14:21:29.000000000 +0000
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/mojom_bindings_generator.py	2020-09-18 22:41:34.853663000 +0000
@@ -145,7 +145,7 @@
 
 def ReadFileContents(filename):
   with open(filename, 'rb') as f:
-    return f.read()
+    return f.read().decode()
 
 
 class MojomProcessor(object):
--- ./src/3rdparty/chromium/tools/polymer/polymer.py.orig	2020-05-06 14:21:29.000000000 +0000
+++ ./src/3rdparty/chromium/tools/polymer/polymer.py	2020-09-18 22:41:34.853892000 +0000
@@ -491,8 +491,6 @@
   # across platforms.
   with io.open(os.path.join(out_folder, result[1]), mode='w', encoding='utf-8', newline='\n') as f:
     for l in result[0]:
-      if (type(l) != unicode):
-        l = unicode(l, encoding='utf-8')
       f.write(l)
   return
 
